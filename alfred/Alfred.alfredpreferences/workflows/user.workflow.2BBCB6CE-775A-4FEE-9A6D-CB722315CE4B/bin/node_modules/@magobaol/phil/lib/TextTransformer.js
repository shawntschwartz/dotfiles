"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextTransformer = void 0;
const CaseConverters = __importStar(require("./Filters/caseConverters"));
const respacer_1 = require("./Filters/respacer");
class TextTransformer {
    constructor(text) {
        this.appliedFilters = [];
        this.text = text;
    }
    resetAppliedFilters() {
        this.appliedFilters = [];
    }
    apply(filter) {
        const before = this.text;
        const after = (this.text = filter(this.text));
        const filterName = filter.filterName;
        this.appliedFilters.push({
            filter: filterName,
            before,
            after,
        });
    }
    getAppliedFilters() {
        return this.appliedFilters;
    }
    setText(text) {
        this.text = text;
        this.resetAppliedFilters();
        return this;
    }
    getText() {
        return this.text;
    }
    getLastFilter() {
        return this.appliedFilters[this.appliedFilters.length - 1];
    }
    toSpace() {
        this.apply(respacer_1.toSpace);
        return this;
    }
    toUpper() {
        this.apply(CaseConverters.toUpper);
        return this;
    }
    toLower() {
        this.apply(CaseConverters.toLower);
        return this;
    }
    toTitle() {
        this.apply(CaseConverters.toTitle);
        return this;
    }
    toSentence() {
        this.apply(CaseConverters.toSentence);
        return this;
    }
    toCamel() {
        this.apply(CaseConverters.toCamel);
        return this;
    }
    toPascal() {
        this.apply(CaseConverters.toPascal);
        return this;
    }
    toSnake() {
        this.apply(CaseConverters.toSnake);
        return this;
    }
    toSpinal() {
        this.apply(CaseConverters.toSpinal);
        return this;
    }
}
exports.TextTransformer = TextTransformer;
//# sourceMappingURL=TextTransformer.js.map