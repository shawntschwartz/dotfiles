#!/bin/zsh

build_xcode() {
  if ! xcode-select --print-path &> /dev/null; then
    xcode-select --install &> /dev/null

    until xcode-select --print-path &> /dev/null; do
      sleep 5
    done
  fi
}

install_mac_app_store_apps() {
  printf "make sure to manually download the following apps from the mac app store due to signin issues with mas...\n"
  printf "-- https://apps.apple.com/us/app/amphetamine/id937984704?mt=12\n"
  printf "-- https://apps.apple.com/us/app/sleeve-for-spotify-music/id1606145041?mt=12\n"
  printf "-- https://apps.apple.com/us/app/system-color-picker/id1545870783?mt=12\n"
  printf "press <RETURN> after manually installing to continue..."
  read -r
}

config_git() {
  cp ~/dotfiles/git/.extra.template .extra.sh
  vim .extra.sh
  bash .extra.sh
}

generate_ssh_key() {
  local email="$1"
  local key_path="$2"

  if [[ -z "$email" ]]; then
    echo "enter your email for the ssh key: "
    read email
  fi

  if [[ -z "$email" ]]; then
    echo "error: no email provided... exiting."
    return 1
  fi

  if [[ -z "$key_path" ]]; then
    echo "enter the path where the ssh key should be saved (default: /Users/${USER}/.ssh/id_ed25519): "
    read key_path
    key_path="${key_path:-/Users/$USER/.ssh/id_ed25519}"
    echo "${key_path}"
  fi

  ssh-keygen -t ed25519 -C "$email" -f "$key_path"
  echo "[INFO] - ssh key generated at $key_path with email: $email"

  echo "[INFO] - starting the ssh-agent in the background..."
  eval "$(ssh-agent -s)"

  echo "[INFO] - adding ssh private key to the ssh-agent and storing passphrase in the mac keychain..."
  ssh-add --apple-use-keychain "$key_path"

  pub_key_content=$(cat "${key_path}.pub")
  echo "$pub_key_content" | pbcopy
  echo "[INFO] - public key copied to clipboard! please add to github! press <RETURN> once it's been added to continue..."
  read -r
}

get_obsidian_vault() {
  git clone git@github.com:shawntschwartz/obsidian.git ~/documents/obsidian
}

make_neofetch() {
  sudo make -C ~/dotfiles/src/neofetch PREFIX=/usr/local install
}

config_crons() {
  crontab ~/dotfiles/crontab/crontab
}

create_dirs() {
  ~/dotfiles/finder/finder
}

install_brew() {
  ~/dotfiles/brew/brew
}

config_macos() {
  ~/dotfiles/macos/macos
}

stow_dotfiles() {
  ~/dotfiles/stow/stow
}

confirm_reboot() {
  echo "[IMPORTANT] - it's now time to reboot... press <return> to continue or ctrl+c to cancel."
  read -r
  sudo reboot
}

printf "🛠  installing xcode command line tools...\n"
build_xcode

printf "🔑  generating ssh key...\n"
generate_ssh_key

printf "🐙  configuring git...\n"
config_git

printf "🗄  creating directories and configuring finder...\n"
create_dirs

printf "🍺  brewing packages...\n"
install_brew

printf "👨🏼‍💻  building neofetch from source...\n"
make_neofetch

printf "⏰  configuring cron jobs...\n"
config_crons

printf "😇  stowing dotfiles...\n"
stow_dotfiles

printf "💎  getting obsidian vault...\n"
get_obsidian_vault

printf "🛍️  shopping the mac app store...\n"
install_mac_app_store_apps

printf "💻  setting up macos...\n"
config_macos

printf "✨  order up, your mac is ready!!\n"
confirm_reboot
